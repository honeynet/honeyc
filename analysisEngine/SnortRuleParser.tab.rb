#
# DO NOT MODIFY!!!!
# This file is automatically generated by racc 1.4.5
# from racc grammer file "SnortRuleParser.y".
#

require 'racc/parser'


#!/usr/bin/env ruby

# a simple parser for generating snort rule objects. this is an automatically
# generated class by racc using the SnortRuleParser.y file.
#
# There are the following limitations: 
#	-non payload match is limited to flow and flowbits
#	-only alert action is supported
#	-ftpbounce is not supported
#	-byte_jump is not supported
#	-tag is not supported
#	-from_begining is not supported
# Author: Christian Seifert
# http://www.mcs.vuw.ac.nz/~cseifert/blog/index.php

require 'analysisEngine/SnortRuleLexer'
require 'analysisEngine/SnortRule'
require 'analysisEngine/SnortRuleContent'
require 'analysisEngine/SnortRuleUriContent'
require 'analysisEngine/SnortRuleHeaderContent'
require 'analysisEngine/SnortRuleByte'
require 'analysisEngine/SnortRuleFlowBit'

class SnortRuleParser < Racc::Parser

module_eval <<'..end SnortRuleParser.y modeval..id69a4393fa7', 'SnortRuleParser.y', 525
	def parse(rule_str)
		#lex it
		@q = SnortRuleLexer.tokenize(rule_str)
		@snort_rule = SnortRule.new
		@order_no = 0
		do_parse
		return @snort_rule
	end
	
	def next_token
		@q.shift
	end

	def parse_rules(rules_location)
		rules = Array.new
		IO.foreach(rules_location) {|rule_string|
			begin
				if(rule_string.length > 1 && rule_string.index("#")!=0)
					snort_rule = parse(rule_string)
					if (snort_rule.relevant?)
					    snort_rule.check
					    rules.push(snort_rule) 	
				    	end
				end
			rescue StandardError => error
				STDERR.puts "Unable to parse rule " + rule_string + ": "
				STDERR.puts error
			end
		}
		return rules
	end

	def unescape(str)
		#replace \\ with \
		#replace \: with :
		#replace \; with ;
		while(str.sub(/\\\"/, "\"")!=str)
			str.sub!("\\\"","\"")
		end
		while(str.sub(/\\:/, ":")!=str)
			str.sub!("\\:",":")
		end
		while(str.sub(/\\;/, ";")!=str)
			str.sub!("\\;",";")
		end		
		return str
	end
	
..end SnortRuleParser.y modeval..id69a4393fa7

##### racc 1.4.5 generates ###

racc_reduce_table = [
 0, 0, :racc_error,
 10, 46, :_reduce_1,
 2, 47, :_reduce_2,
 1, 47, :_reduce_3,
 2, 47, :_reduce_4,
 1, 47, :_reduce_5,
 1, 47, :_reduce_6,
 4, 48, :_reduce_7,
 3, 48, :_reduce_8,
 3, 48, :_reduce_9,
 2, 48, :_reduce_10,
 3, 48, :_reduce_11,
 2, 48, :_reduce_12,
 2, 48, :_reduce_13,
 1, 48, :_reduce_14,
 2, 48, :_reduce_15,
 1, 48, :_reduce_16,
 2, 48, :_reduce_17,
 1, 48, :_reduce_18,
 1, 49, :_reduce_19,
 2, 50, :_reduce_20,
 1, 50, :_reduce_21,
 2, 50, :_reduce_22,
 1, 50, :_reduce_23,
 1, 50, :_reduce_24,
 4, 51, :_reduce_25,
 3, 51, :_reduce_26,
 3, 51, :_reduce_27,
 2, 51, :_reduce_28,
 3, 51, :_reduce_29,
 2, 51, :_reduce_30,
 2, 51, :_reduce_31,
 1, 51, :_reduce_32,
 2, 51, :_reduce_33,
 1, 51, :_reduce_34,
 2, 51, :_reduce_35,
 1, 51, :_reduce_36,
 2, 52, :_reduce_none,
 2, 52, :_reduce_none,
 1, 53, :_reduce_none,
 1, 53, :_reduce_none,
 1, 53, :_reduce_none,
 1, 53, :_reduce_none,
 1, 53, :_reduce_none,
 1, 53, :_reduce_none,
 1, 53, :_reduce_none,
 1, 53, :_reduce_none,
 1, 53, :_reduce_none,
 1, 53, :_reduce_none,
 1, 53, :_reduce_none,
 1, 53, :_reduce_none,
 1, 53, :_reduce_none,
 1, 53, :_reduce_none,
 1, 53, :_reduce_none,
 1, 53, :_reduce_none,
 1, 53, :_reduce_none,
 1, 53, :_reduce_none,
 1, 53, :_reduce_none,
 1, 53, :_reduce_none,
 3, 54, :_reduce_59,
 3, 55, :_reduce_60,
 3, 56, :_reduce_61,
 3, 57, :_reduce_62,
 3, 58, :_reduce_63,
 4, 60, :_reduce_64,
 3, 60, :_reduce_65,
 3, 59, :_reduce_66,
 1, 63, :_reduce_67,
 1, 65, :_reduce_68,
 3, 64, :_reduce_69,
 3, 68, :_reduce_70,
 3, 66, :_reduce_71,
 3, 67, :_reduce_72,
 5, 69, :_reduce_73,
 3, 69, :_reduce_74,
 4, 61, :_reduce_75,
 3, 61, :_reduce_76,
 4, 62, :_reduce_77,
 3, 62, :_reduce_78,
 4, 70, :_reduce_79,
 3, 70, :_reduce_80,
 18, 71, :_reduce_81,
 17, 71, :_reduce_82,
 16, 71, :_reduce_83,
 15, 71, :_reduce_84,
 16, 71, :_reduce_85,
 15, 71, :_reduce_86,
 14, 71, :_reduce_87,
 13, 71, :_reduce_88,
 12, 71, :_reduce_89,
 11, 71, :_reduce_90,
 14, 71, :_reduce_91,
 13, 71, :_reduce_92,
 12, 71, :_reduce_93,
 11, 71, :_reduce_94,
 10, 71, :_reduce_95,
 9, 71, :_reduce_96,
 3, 72, :_reduce_97,
 5, 73, :_reduce_98,
 3, 73, :_reduce_99 ]

racc_reduce_n = 100

racc_shift_n = 198

racc_action_table = [
   112,    62,    66,   130,    73,    76,   131,    17,    89,    92,
    55,    58,    18,    65,    69,    72,    77,    81,    84,    88,
   164,    53,   148,    61,   120,    44,    50,   121,    80,    46,
    87,    47,    54,    62,    66,   118,    73,    76,   119,    45,
    89,    92,    55,    58,    51,    65,    69,    72,    77,    81,
    84,    88,   147,    53,    35,    61,   183,    21,   184,    36,
    80,    23,    87,    24,    54,    62,    66,   132,    73,    76,
   133,    22,    89,    92,    55,    58,    52,    65,    69,    72,
    77,    81,    84,    88,    37,    53,    38,    61,    41,    11,
    42,    13,    80,    15,    87,    16,    54,   163,    39,   173,
   170,   174,   161,    14,   162,   168,    48,   169,    27,    28,
    29,     6,     7,     8,    31,    95,    96,     9,    97,    98,
    99,   100,   101,   102,   103,   104,   105,   106,   107,   108,
   109,   110,   111,    43,   114,   115,   116,   117,    34,    33,
   122,   123,   124,   125,   126,   127,   128,   129,    32,    26,
   134,   135,   136,    25,   137,   138,   139,   140,   141,   142,
   143,   144,   145,   146,    20,   149,   150,   151,   152,   153,
   154,   155,   156,   157,   158,   159,   160,    10,    49,   165,
   166,   167,     1,   171,   172,     4,   175,   176,   177,   178,
   179,   180,   181,   182,     3,   185,   186,   187,   188,   189,
   190,   191,   192,   193,   194,   195,   196,   197 ]

racc_action_check = [
    86,    86,    86,   107,    86,    86,   107,     8,    86,    86,
    86,    86,     8,    86,    86,    86,    86,    86,    86,    86,
   160,    86,   142,    86,    98,    38,    41,    98,    86,    38,
    86,    38,    86,    49,    49,    97,    49,    49,    97,    38,
    49,    49,    49,    49,    45,    49,    49,    49,    49,    49,
    49,    49,   142,    49,    29,    49,   177,    13,   177,    29,
    49,    13,    49,    13,    49,   113,   113,   108,   113,   113,
   108,    13,   113,   113,   113,   113,    46,   113,   113,   113,
   113,   113,   113,   113,    30,   113,    30,   113,    30,     5,
    30,     5,   113,     5,   113,     5,   113,   159,    30,   167,
   164,   167,   159,     5,   159,   164,    39,   164,    19,    19,
    19,     3,     3,     3,    19,    50,    52,     3,    53,    54,
    55,    58,    61,    62,    65,    66,    69,    72,    73,    76,
    77,    80,    84,    33,    87,    88,    91,    92,    26,    23,
    99,   100,   101,   102,   103,   104,   105,   106,    22,    15,
   109,   110,   111,    14,   114,   115,   117,   118,   120,   124,
   130,   132,   137,   138,    12,   145,   146,   147,   148,   151,
   152,   153,   154,   155,   156,   157,   158,     4,    40,   161,
   162,   163,     0,   165,   166,     2,   168,   169,   170,   171,
   173,   174,   175,   176,     1,   178,   179,   180,   181,   183,
   184,   186,   188,   189,   190,   191,   193,   196 ]

racc_action_pointer = [
   180,   191,   185,   107,   177,    85,   nil,   nil,     2,   nil,
   nil,   nil,   157,    53,   145,   131,   nil,   nil,   nil,   104,
   nil,   nil,   140,   121,   nil,   nil,   130,   nil,   nil,    49,
    80,   nil,   nil,   125,   nil,   nil,   nil,   nil,    21,    98,
   167,     8,   nil,   nil,   nil,    36,    58,   nil,   nil,    20,
   107,   nil,   108,   100,   101,   102,   nil,   nil,   103,   nil,
   nil,   104,   105,   nil,   nil,   106,   107,   nil,   nil,   108,
   nil,   nil,   109,   110,   nil,   nil,   111,   112,   nil,   nil,
   113,   nil,   nil,   nil,   114,   nil,   -12,   116,   117,   nil,
   nil,   117,   119,   nil,   nil,   nil,   nil,    29,    18,   132,
   117,   134,   134,   136,   130,   138,   139,    -3,    61,   142,
   110,   144,   nil,    52,   111,   147,   nil,   148,   148,   nil,
   149,   nil,   nil,   nil,   125,   nil,   nil,   nil,   nil,   nil,
   151,   nil,   152,   nil,   nil,   nil,   nil,   128,   129,   nil,
   nil,   nil,    16,   nil,   nil,   150,   134,   133,   132,   nil,
   nil,   161,   136,   137,   164,   165,   140,   141,   168,    65,
   -14,   145,   146,   147,    68,   144,   146,    62,   152,   153,
   154,   155,   nil,   156,   157,   153,   155,    19,   157,   157,
   159,   164,   nil,   165,   166,   nil,   167,   nil,   164,   164,
   166,   167,   nil,   172,   nil,   nil,   169,   nil ]

racc_action_default = [
  -100,  -100,  -100,  -100,  -100,  -100,    -6,    -3,  -100,    -5,
   198,   -16,  -100,  -100,  -100,   -14,   -18,    -2,    -4,  -100,
   -19,   -15,  -100,   -13,   -17,   -12,   -10,   -24,   -21,  -100,
  -100,   -23,   -11,    -9,    -8,   -20,   -22,   -34,  -100,  -100,
  -100,   -32,   -36,    -7,   -33,  -100,   -31,   -35,   -30,  -100,
   -28,   -29,   -27,  -100,  -100,  -100,   -51,   -40,  -100,   -52,
   -41,  -100,  -100,   -53,   -42,  -100,  -100,   -54,   -43,  -100,
   -55,   -44,  -100,  -100,   -56,   -45,  -100,  -100,   -57,   -46,
  -100,   -68,   -58,   -47,  -100,   -48,  -100,  -100,  -100,   -67,
   -49,  -100,  -100,   -50,   -39,   -26,   -25,  -100,  -100,  -100,
  -100,  -100,  -100,  -100,  -100,  -100,  -100,  -100,  -100,  -100,
  -100,  -100,    -1,   -38,  -100,  -100,   -37,  -100,  -100,   -80,
  -100,   -78,   -61,   -63,  -100,   -59,   -66,   -60,   -69,   -71,
  -100,   -65,  -100,   -76,   -70,   -97,   -72,   -99,   -74,   -62,
   -79,   -77,  -100,   -64,   -75,  -100,  -100,  -100,  -100,   -98,
   -73,  -100,  -100,  -100,  -100,  -100,  -100,   -96,  -100,  -100,
   -95,   -94,  -100,   -90,  -100,  -100,  -100,  -100,   -93,  -100,
   -89,  -100,   -92,   -88,  -100,  -100,  -100,  -100,  -100,  -100,
  -100,  -100,   -91,   -87,  -100,   -84,  -100,   -86,  -100,  -100,
  -100,  -100,   -83,  -100,   -85,   -82,  -100,   -81 ]

racc_goto_table = [
     2,     5,    12,    19,    30,    40,    86 ]

racc_goto_check = [
     1,     2,     3,     4,     5,     6,     7 ]

racc_goto_pointer = [
   nil,     0,    -2,    -3,    -9,   -15,   -25,   -43,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil ]

racc_goto_default = [
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   113,    91,    94,
    57,    60,    64,    68,    71,    75,    79,    83,    85,    90,
    93,    56,    59,    63,    67,    70,    74,    78,    82 ]

racc_token_table = {
 false => 0,
 Object.new => 1,
 :ACTION => 2,
 :PROTOCOL => 3,
 :ANY => 4,
 :IP => 5,
 :NOT => 6,
 :DIRECTION => 7,
 :INTEGER => 8,
 :STRING => 9,
 :VARIABLE => 10,
 :LPAREN => 11,
 :RPAREN => 12,
 :MSG => 13,
 :REFERENCE => 14,
 :VALUE => 15,
 :CONTENT => 16,
 :URICONTENT => 17,
 :ASSIGNMENT => 18,
 :SEMICOLON => 19,
 :NOCASE => 20,
 :REV => 21,
 :SID => 22,
 :CLASSTYPE => 23,
 :CLASSTYPE_VALUE => 24,
 :PRIORITY => 25,
 :DEPTH => 26,
 :OFFSET => 27,
 :WITHIN => 28,
 :RAWBYTES => 29,
 :DISTANCE => 30,
 :ISDATAAT => 31,
 :RELATIVE => 32,
 :PCRE => 33,
 :COMMA => 34,
 :BYTETEST => 35,
 :OPERATOR => 36,
 :ENDIAN => 37,
 :NUMBERTYPE => 38,
 :LITSTRING => 39,
 :FLOW => 40,
 :FLOW_VALUE => 41,
 :FLOWBITS => 42,
 :FLOWBITS_KEYWORD => 43,
 :HEADERCONTENT => 44 }

racc_use_result_var = true

racc_nt_base = 45

Racc_arg = [
 racc_action_table,
 racc_action_check,
 racc_action_default,
 racc_action_pointer,
 racc_goto_table,
 racc_goto_check,
 racc_goto_default,
 racc_goto_pointer,
 racc_nt_base,
 racc_reduce_table,
 racc_token_table,
 racc_shift_n,
 racc_reduce_n,
 racc_use_result_var ]

Racc_token_to_s_table = [
'$end',
'error',
'ACTION',
'PROTOCOL',
'ANY',
'IP',
'NOT',
'DIRECTION',
'INTEGER',
'STRING',
'VARIABLE',
'LPAREN',
'RPAREN',
'MSG',
'REFERENCE',
'VALUE',
'CONTENT',
'URICONTENT',
'ASSIGNMENT',
'SEMICOLON',
'NOCASE',
'REV',
'SID',
'CLASSTYPE',
'CLASSTYPE_VALUE',
'PRIORITY',
'DEPTH',
'OFFSET',
'WITHIN',
'RAWBYTES',
'DISTANCE',
'ISDATAAT',
'RELATIVE',
'PCRE',
'COMMA',
'BYTETEST',
'OPERATOR',
'ENDIAN',
'NUMBERTYPE',
'LITSTRING',
'FLOW',
'FLOW_VALUE',
'FLOWBITS',
'FLOWBITS_KEYWORD',
'HEADERCONTENT',
'$start',
'target',
'src_ip',
'src_ports',
'direction',
'dst_ip',
'dst_ports',
'statement_list',
'statement',
'msg_assignment',
'reference_assignment',
'sid_assignment',
'rev_assignment',
'class_type_assignment',
'priority_assignment',
'content_assignment',
'uri_content_assignment',
'header_content_assignment',
'nocase',
'depth_assignment',
'raw_bytes',
'offset_assignment',
'distance_assignment',
'within_assignment',
'isdataat_assignment',
'pcre_assignment',
'byte_test_assignment',
'flow_assignment',
'flow_bit_assignment']

Racc_debug_parser = false

##### racc system variables end #####

 # reduce 0 omitted

module_eval <<'.,.,', 'SnortRuleParser.y', 19
  def _reduce_1( val, _values, result )
			@snort_rule.action = val[0]
			@snort_rule.protocol = val[1]
   result
  end
.,.,

module_eval <<'.,.,', 'SnortRuleParser.y', 20
  def _reduce_2( val, _values, result )
 @snort_rule.src_ip = val[0] + val[1]
   result
  end
.,.,

module_eval <<'.,.,', 'SnortRuleParser.y', 21
  def _reduce_3( val, _values, result )
 @snort_rule.src_ip = val[0]
   result
  end
.,.,

module_eval <<'.,.,', 'SnortRuleParser.y', 22
  def _reduce_4( val, _values, result )
 @snort_rule.src_ip = val[0] + val[1]
   result
  end
.,.,

module_eval <<'.,.,', 'SnortRuleParser.y', 23
  def _reduce_5( val, _values, result )
 @snort_rule.src_ip = val[0]
   result
  end
.,.,

module_eval <<'.,.,', 'SnortRuleParser.y', 24
  def _reduce_6( val, _values, result )
 @snort_rule.src_ip = val[0]
   result
  end
.,.,

module_eval <<'.,.,', 'SnortRuleParser.y', 28
  def _reduce_7( val, _values, result )
 @snort_rule.src_ports_not = true  
								  @snort_rule.src_ports = val[1].to_i..val[3].to_i
   result
  end
.,.,

module_eval <<'.,.,', 'SnortRuleParser.y', 29
  def _reduce_8( val, _values, result )
 @snort_rule.src_ports = val[0].to_i..val[2].to_i
   result
  end
.,.,

module_eval <<'.,.,', 'SnortRuleParser.y', 31
  def _reduce_9( val, _values, result )
 @snort_rule.src_ports_not = true
						  @snort_rule.src_ports = val[1].to_i..65535
   result
  end
.,.,

module_eval <<'.,.,', 'SnortRuleParser.y', 32
  def _reduce_10( val, _values, result )
 @snort_rule.src_ports = val[0].to_i..65535
   result
  end
.,.,

module_eval <<'.,.,', 'SnortRuleParser.y', 34
  def _reduce_11( val, _values, result )
 @snort_rule.src_ports_not = true
						  @snort_rule.src_ports = 0..val[2].to_i
   result
  end
.,.,

module_eval <<'.,.,', 'SnortRuleParser.y', 35
  def _reduce_12( val, _values, result )
 @snort_rule.src_ports = 0..val[0].to_i
   result
  end
.,.,

module_eval <<'.,.,', 'SnortRuleParser.y', 37
  def _reduce_13( val, _values, result )
 @snort_rule.src_ports_not = true
					  @snort_rule.src_ports = val[1].to_i..val[1].to_i
   result
  end
.,.,

module_eval <<'.,.,', 'SnortRuleParser.y', 38
  def _reduce_14( val, _values, result )
 @snort_rule.src_ports = val[0].to_i..val[0].to_i
   result
  end
.,.,

module_eval <<'.,.,', 'SnortRuleParser.y', 40
  def _reduce_15( val, _values, result )
 @snort_rule.src_ports_not = true
					  @snort_rule.src_ports = 0..65535
   result
  end
.,.,

module_eval <<'.,.,', 'SnortRuleParser.y', 42
  def _reduce_16( val, _values, result )
 @snort_rule.src_ports_not = false
				  @snort_rule.src_ports = 0..65535
   result
  end
.,.,

module_eval <<'.,.,', 'SnortRuleParser.y', 44
  def _reduce_17( val, _values, result )
 @snort_rule.src_ports_not = true
					  @snort_rule.src_ports = val[1]
   result
  end
.,.,

module_eval <<'.,.,', 'SnortRuleParser.y', 45
  def _reduce_18( val, _values, result )
 @snort_rule.src_ports = val[0]
   result
  end
.,.,

module_eval <<'.,.,', 'SnortRuleParser.y', 49
  def _reduce_19( val, _values, result )
			@snort_rule.direction = val[0]
   result
  end
.,.,

module_eval <<'.,.,', 'SnortRuleParser.y', 50
  def _reduce_20( val, _values, result )
 @snort_rule.dst_ip = val[0] + val[1]
   result
  end
.,.,

module_eval <<'.,.,', 'SnortRuleParser.y', 51
  def _reduce_21( val, _values, result )
 @snort_rule.dst_ip = val[0]
   result
  end
.,.,

module_eval <<'.,.,', 'SnortRuleParser.y', 52
  def _reduce_22( val, _values, result )
 @snort_rule.dst_ip = val[0] + val[1]
   result
  end
.,.,

module_eval <<'.,.,', 'SnortRuleParser.y', 53
  def _reduce_23( val, _values, result )
 @snort_rule.dst_ip = val[0]
   result
  end
.,.,

module_eval <<'.,.,', 'SnortRuleParser.y', 54
  def _reduce_24( val, _values, result )
 @snort_rule.dst_ip = val[0]
   result
  end
.,.,

module_eval <<'.,.,', 'SnortRuleParser.y', 57
  def _reduce_25( val, _values, result )
 @snort_rule.dst_ports_not = true  
								  @snort_rule.dst_ports = val[1].to_i..val[3].to_i
   result
  end
.,.,

module_eval <<'.,.,', 'SnortRuleParser.y', 58
  def _reduce_26( val, _values, result )
 @snort_rule.dst_ports = val[0].to_i..val[2].to_i
   result
  end
.,.,

module_eval <<'.,.,', 'SnortRuleParser.y', 60
  def _reduce_27( val, _values, result )
 @snort_rule.dst_ports_not = true
						 	  @snort_rule.dst_ports = val[1].to_i..65535
   result
  end
.,.,

module_eval <<'.,.,', 'SnortRuleParser.y', 61
  def _reduce_28( val, _values, result )
 @snort_rule.dst_ports = val[0].to_i..65535
   result
  end
.,.,

module_eval <<'.,.,', 'SnortRuleParser.y', 63
  def _reduce_29( val, _values, result )
 @snort_rule.dst_ports_not = true
						  	  @snort_rule.dst_ports = 0..val[2].to_i
   result
  end
.,.,

module_eval <<'.,.,', 'SnortRuleParser.y', 64
  def _reduce_30( val, _values, result )
 @snort_rule.dst_ports = 0..val[0].to_i
   result
  end
.,.,

module_eval <<'.,.,', 'SnortRuleParser.y', 66
  def _reduce_31( val, _values, result )
 @snort_rule.dst_ports_not = true
					  @snort_rule.dst_ports = val[1].to_i..val[1].to_i
   result
  end
.,.,

module_eval <<'.,.,', 'SnortRuleParser.y', 67
  def _reduce_32( val, _values, result )
 @snort_rule.dst_ports = val[0].to_i..val[0].to_i
   result
  end
.,.,

module_eval <<'.,.,', 'SnortRuleParser.y', 69
  def _reduce_33( val, _values, result )
 @snort_rule.dst_ports_not = true
					  @snort_rule.dst_ports = 0..65535
   result
  end
.,.,

module_eval <<'.,.,', 'SnortRuleParser.y', 71
  def _reduce_34( val, _values, result )
 @snort_rule.dst_ports_not = false
				  @snort_rule.dst_ports = 0..65535
   result
  end
.,.,

module_eval <<'.,.,', 'SnortRuleParser.y', 73
  def _reduce_35( val, _values, result )
 @snort_rule.dst_ports_not = true
					  @snort_rule.dst_ports = val[1]
   result
  end
.,.,

module_eval <<'.,.,', 'SnortRuleParser.y', 74
  def _reduce_36( val, _values, result )
 @snort_rule.dst_ports = val[0]
   result
  end
.,.,

 # reduce 37 omitted

 # reduce 38 omitted

 # reduce 39 omitted

 # reduce 40 omitted

 # reduce 41 omitted

 # reduce 42 omitted

 # reduce 43 omitted

 # reduce 44 omitted

 # reduce 45 omitted

 # reduce 46 omitted

 # reduce 47 omitted

 # reduce 48 omitted

 # reduce 49 omitted

 # reduce 50 omitted

 # reduce 51 omitted

 # reduce 52 omitted

 # reduce 53 omitted

 # reduce 54 omitted

 # reduce 55 omitted

 # reduce 56 omitted

 # reduce 57 omitted

 # reduce 58 omitted

module_eval <<'.,.,', 'SnortRuleParser.y', 103
  def _reduce_59( val, _values, result )
			@snort_rule.msg = val[2]
   result
  end
.,.,

module_eval <<'.,.,', 'SnortRuleParser.y', 106
  def _reduce_60( val, _values, result )
			@snort_rule.references.push(val[2])
   result
  end
.,.,

module_eval <<'.,.,', 'SnortRuleParser.y', 109
  def _reduce_61( val, _values, result )
			@snort_rule.sid = val[2].to_i
   result
  end
.,.,

module_eval <<'.,.,', 'SnortRuleParser.y', 112
  def _reduce_62( val, _values, result )
			@snort_rule.rev = val[2].to_i
   result
  end
.,.,

module_eval <<'.,.,', 'SnortRuleParser.y', 115
  def _reduce_63( val, _values, result )
			@snort_rule.class_type = val[2]
   result
  end
.,.,

module_eval <<'.,.,', 'SnortRuleParser.y', 125
  def _reduce_64( val, _values, result )
			@last_call = "content"
			@content = SnortRuleContent.new
			@content.order_no = @order_no
			@snort_rule.max_order_no = @order_no
			@order_no = @order_no + 1
			@snort_rule.contents.push(@content)
			@content.not_modifier = true
			@content.unescaped_string = unescape(val[3])
   result
  end
.,.,

module_eval <<'.,.,', 'SnortRuleParser.y', 133
  def _reduce_65( val, _values, result )
			@last_call = "content"
			@content = SnortRuleContent.new
			@content.order_no = @order_no
			@snort_rule.max_order_no = @order_no
			@order_no = @order_no + 1
			@snort_rule.contents.push(@content)
			@content.unescaped_string = unescape(val[2])
   result
  end
.,.,

module_eval <<'.,.,', 'SnortRuleParser.y', 136
  def _reduce_66( val, _values, result )
			@snort_rule.priority = val[2].to_i
   result
  end
.,.,

module_eval <<'.,.,', 'SnortRuleParser.y', 145
  def _reduce_67( val, _values, result )
			if @last_call == "content"
				@content.nocase = true
			elsif @last_call == "uri_content"
				@uri_content.nocase = true
			elsif @last_call == "header_content"
				@header_content.nocase = true
			end
   result
  end
.,.,

module_eval <<'.,.,', 'SnortRuleParser.y', 154
  def _reduce_68( val, _values, result )
			if @last_call == "content"
				@content.raw_bytes = true
			elsif @last_call == "uri_content"
				@uri_content.raw_bytes = true
			elsif @last_call == "header_content"
				@header_content.raw_bytes = true
			end
   result
  end
.,.,

module_eval <<'.,.,', 'SnortRuleParser.y', 163
  def _reduce_69( val, _values, result )
			if @last_call == "content"
				@content.depth = val[2].to_i
			elsif @last_call == "uri_content"
				@uri_content.depth = val[2].to_i
			elsif @last_call == "header_content"
				@header_content.depth = val[2].to_i
			end
   result
  end
.,.,

module_eval <<'.,.,', 'SnortRuleParser.y', 172
  def _reduce_70( val, _values, result )
			if @last_call == "content"
				@content.within = val[2].to_i
			elsif @last_call == "uri_content"
				@uri_content.within = val[2].to_i
			elsif @last_call == "header_content"
				@header_content.within = val[2].to_i
			end
   result
  end
.,.,

module_eval <<'.,.,', 'SnortRuleParser.y', 181
  def _reduce_71( val, _values, result )
			if @last_call == "content"
				@content.offset = val[2].to_i
			elsif @last_call == "uri_content"
				@uri_content.offset = val[2].to_i
			elsif @last_call == "header_content"
				@header_content.offset = val[2].to_i
			end
   result
  end
.,.,

module_eval <<'.,.,', 'SnortRuleParser.y', 190
  def _reduce_72( val, _values, result )
			if @last_call == "content"
				@content.distance = val[2].to_i
			elsif @last_call == "uri_content"
				@uri_content.distance = val[2].to_i
			elsif @last_call == "header_content"
				@header_content.distance = val[2].to_i
			end
   result
  end
.,.,

module_eval <<'.,.,', 'SnortRuleParser.y', 193
  def _reduce_73( val, _values, result )
			@uri_content.isdataat = val[2] + val[3] + val[4]
   result
  end
.,.,

module_eval <<'.,.,', 'SnortRuleParser.y', 195
  def _reduce_74( val, _values, result )
			@uri_content.isdataat = val[2]
   result
  end
.,.,

module_eval <<'.,.,', 'SnortRuleParser.y', 205
  def _reduce_75( val, _values, result )
			@last_call = "uri_content"
			@uri_content = SnortRuleUriContent.new
			@uri_content.order_no = @order_no
			@snort_rule.max_order_no = @order_no
			@order_no = @order_no + 1
			@snort_rule.uri_contents.push(@uri_content)
			@uri_content.not_modifier = true
			@uri_content.unescaped_string = unescape(val[3])
   result
  end
.,.,

module_eval <<'.,.,', 'SnortRuleParser.y', 213
  def _reduce_76( val, _values, result )
			@last_call = "uri_content"
			@uri_content = SnortRuleUriContent.new
			@uri_content.order_no = @order_no
			@snort_rule.max_order_no = @order_no
			@order_no = @order_no + 1
			@snort_rule.uri_contents.push(@uri_content)
			@uri_content.unescaped_string = unescape(val[2])
   result
  end
.,.,

module_eval <<'.,.,', 'SnortRuleParser.y', 223
  def _reduce_77( val, _values, result )
			@last_call = "header_content"
			@header_content = SnortRuleHeaderContent.new
			@header_content.order_no = @order_no
			@snort_rule.max_order_no = @order_no
			@order_no = @order_no + 1
			@snort_rule.header_contents.push(@header_content)
			@header_content.not_modifier = true
			@header_content.unescaped_string = unescape(val[3])
   result
  end
.,.,

module_eval <<'.,.,', 'SnortRuleParser.y', 231
  def _reduce_78( val, _values, result )
			@last_call = "header_content"
			@header_content = SnortRuleHeaderContent.new
			@header_content.order_no = @order_no
			@snort_rule.max_order_no = @order_no
			@order_no = @order_no + 1
			@snort_rule.header_contents.push(@header_content)
			@header_content.unescaped_string = unescape(val[2])
   result
  end
.,.,

module_eval <<'.,.,', 'SnortRuleParser.y', 242
  def _reduce_79( val, _values, result )
			pcre = SnortRulePcre.new
			pcre.order_no = @order_no
			@snort_rule.max_order_no = @order_no
			@order_no = @order_no + 1
			pcre.not_modifier = true
			last_slash = val[3].rindex("/")
			pcre.regex = val[3][0..last_slash]
			pcre.modifiers = val[3][last_slash+1..-1]
			@snort_rule.pcres.push(pcre)
   result
  end
.,.,

module_eval <<'.,.,', 'SnortRuleParser.y', 251
  def _reduce_80( val, _values, result )
			pcre = SnortRulePcre.new
			pcre.order_no = @order_no
			@snort_rule.max_order_no = @order_no
			@order_no = @order_no + 1
			last_slash = val[2].rindex("/")
			pcre.regex = val[2][0..last_slash]
			pcre.modifiers = val[2][last_slash+1..-1]
			@snort_rule.pcres.push(pcre)
   result
  end
.,.,

module_eval <<'.,.,', 'SnortRuleParser.y', 269
  def _reduce_81( val, _values, result )
				snort_rule_byte_test = SnortRuleByte.new
				snort_rule_byte_test.order_no = @order_no
				@snort_rule.max_order_no = @order_no
				@order_no = @order_no + 1
				@snort_rule.byte_test = snort_rule_byte_test
				snort_rule_byte_test.bytes_to_convert = val[2].to_i
				snort_rule_byte_test.operator_not_modifier = true
				snort_rule_byte_test.operator = val[5]
				snort_rule_byte_test.value = val[7].to_i
				snort_rule_byte_test.offset = val[9].to_i
				snort_rule_byte_test.relative = val[11]
				snort_rule_byte_test.endian = val[13]
				snort_rule_byte_test.number_type = val[15]
				snort_rule_byte_test.string_lit = val[17]
   result
  end
.,.,

module_eval <<'.,.,', 'SnortRuleParser.y', 286
  def _reduce_82( val, _values, result )
				snort_rule_byte_test = SnortRuleByte.new
				snort_rule_byte_test.order_no = @order_no
				@snort_rule.max_order_no = @order_no
				@order_no = @order_no + 1
				@snort_rule.byte_test = snort_rule_byte_test
				snort_rule_byte_test.bytes_to_convert = val[2].to_i
				snort_rule_byte_test.operator_not_modifier = true
				snort_rule_byte_test.operator = val[4]
				snort_rule_byte_test.value = val[6].to_i
				snort_rule_byte_test.offset = val[8].to_i
				snort_rule_byte_test.relative = val[10]
				snort_rule_byte_test.endian = val[12]
				snort_rule_byte_test.number_type = val[14]
				snort_rule_byte_test.string_lit = val[16]
   result
  end
.,.,

module_eval <<'.,.,', 'SnortRuleParser.y', 302
  def _reduce_83( val, _values, result )
				snort_rule_byte_test = SnortRuleByte.new
				snort_rule_byte_test.order_no = @order_no
				@snort_rule.max_order_no = @order_no
				@order_no = @order_no + 1
				@snort_rule.byte_test = snort_rule_byte_test
				snort_rule_byte_test.bytes_to_convert = val[2].to_i
				snort_rule_byte_test.operator_not_modifier = true
				snort_rule_byte_test.operator = val[5]
				snort_rule_byte_test.value = val[7].to_i
				snort_rule_byte_test.offset = val[9].to_i
				snort_rule_byte_test.endian = val[11]
				snort_rule_byte_test.number_type = val[13]
				snort_rule_byte_test.string_lit = val[15]
   result
  end
.,.,

module_eval <<'.,.,', 'SnortRuleParser.y', 317
  def _reduce_84( val, _values, result )
				snort_rule_byte_test = SnortRuleByte.new
				snort_rule_byte_test.order_no = @order_no
				@snort_rule.max_order_no = @order_no
				@order_no = @order_no + 1
				@snort_rule.byte_test = snort_rule_byte_test
				snort_rule_byte_test.bytes_to_convert = val[2].to_i
				snort_rule_byte_test.operator = val[4]
				snort_rule_byte_test.value = val[6].to_i
				snort_rule_byte_test.offset = val[8].to_i
				snort_rule_byte_test.endian = val[10]
				snort_rule_byte_test.number_type = val[12]
				snort_rule_byte_test.string_lit = val[14]
   result
  end
.,.,

module_eval <<'.,.,', 'SnortRuleParser.y', 333
  def _reduce_85( val, _values, result )
				snort_rule_byte_test = SnortRuleByte.new
				snort_rule_byte_test.order_no = @order_no
				@snort_rule.max_order_no = @order_no
				@order_no = @order_no + 1
				@snort_rule.byte_test = snort_rule_byte_test
				snort_rule_byte_test.bytes_to_convert = val[2].to_i
				snort_rule_byte_test.operator_not_modifier = true
				snort_rule_byte_test.operator = val[5]
				snort_rule_byte_test.value = val[7].to_i
				snort_rule_byte_test.offset = val[9].to_i
				snort_rule_byte_test.relative = val[11]
				snort_rule_byte_test.number_type = val[13]
				snort_rule_byte_test.string_lit = val[15]
   result
  end
.,.,

module_eval <<'.,.,', 'SnortRuleParser.y', 348
  def _reduce_86( val, _values, result )
				snort_rule_byte_test = SnortRuleByte.new
				snort_rule_byte_test.order_no = @order_no
				@snort_rule.max_order_no = @order_no
				@order_no = @order_no + 1
				@snort_rule.byte_test = snort_rule_byte_test
				snort_rule_byte_test.bytes_to_convert = val[2].to_i
				snort_rule_byte_test.operator = val[4]
				snort_rule_byte_test.value = val[6].to_i
				snort_rule_byte_test.offset = val[8].to_i
				snort_rule_byte_test.relative = val[10]
				snort_rule_byte_test.number_type = val[12]
				snort_rule_byte_test.string_lit = val[14]
   result
  end
.,.,

module_eval <<'.,.,', 'SnortRuleParser.y', 363
  def _reduce_87( val, _values, result )
				snort_rule_byte_test = SnortRuleByte.new
				snort_rule_byte_test.order_no = @order_no
				@snort_rule.max_order_no = @order_no
				@order_no = @order_no + 1
				@snort_rule.byte_test = snort_rule_byte_test
				snort_rule_byte_test.bytes_to_convert = val[2].to_i
				snort_rule_byte_test.operator_not_modifier = true
				snort_rule_byte_test.operator = val[5]
				snort_rule_byte_test.value = val[7].to_i
				snort_rule_byte_test.offset = val[9].to_i
				snort_rule_byte_test.relative = val[11]
				snort_rule_byte_test.endian = val[13]
   result
  end
.,.,

module_eval <<'.,.,', 'SnortRuleParser.y', 377
  def _reduce_88( val, _values, result )
				snort_rule_byte_test = SnortRuleByte.new
				snort_rule_byte_test.order_no = @order_no
				@snort_rule.max_order_no = @order_no
				@order_no = @order_no + 1
				@snort_rule.byte_test = snort_rule_byte_test
				snort_rule_byte_test.bytes_to_convert = val[2].to_i
				snort_rule_byte_test.operator = val[4]
				snort_rule_byte_test.value = val[6].to_i
				snort_rule_byte_test.offset = val[8].to_i
				snort_rule_byte_test.relative = val[10]
				snort_rule_byte_test.endian = val[12]
   result
  end
.,.,

module_eval <<'.,.,', 'SnortRuleParser.y', 391
  def _reduce_89( val, _values, result )
				snort_rule_byte_test = SnortRuleByte.new
				snort_rule_byte_test.order_no = @order_no
				@snort_rule.max_order_no = @order_no
				@order_no = @order_no + 1
				@snort_rule.byte_test = snort_rule_byte_test
				snort_rule_byte_test.bytes_to_convert = val[2].to_i
				snort_rule_byte_test.operator_not_modifier = true
				snort_rule_byte_test.operator = val[5]
				snort_rule_byte_test.value = val[7].to_i
				snort_rule_byte_test.offset = val[9].to_i
				snort_rule_byte_test.relative = val[11]
   result
  end
.,.,

module_eval <<'.,.,', 'SnortRuleParser.y', 404
  def _reduce_90( val, _values, result )
				snort_rule_byte_test = SnortRuleByte.new
				snort_rule_byte_test.order_no = @order_no
				@snort_rule.max_order_no = @order_no
				@order_no = @order_no + 1
				@snort_rule.byte_test = snort_rule_byte_test
				snort_rule_byte_test.bytes_to_convert = val[2].to_i
				snort_rule_byte_test.operator = val[4]
				snort_rule_byte_test.value = val[6].to_i
				snort_rule_byte_test.offset = val[8].to_i
				snort_rule_byte_test.relative = val[10]
   result
  end
.,.,

module_eval <<'.,.,', 'SnortRuleParser.y', 419
  def _reduce_91( val, _values, result )
				snort_rule_byte_test = SnortRuleByte.new
				snort_rule_byte_test.order_no = @order_no
				@snort_rule.max_order_no = @order_no
				@order_no = @order_no + 1
				@snort_rule.byte_test = snort_rule_byte_test
				snort_rule_byte_test.bytes_to_convert = val[2].to_i
				snort_rule_byte_test.operator_not_modifier = true
				snort_rule_byte_test.operator = val[5]
				snort_rule_byte_test.value = val[7].to_i
				snort_rule_byte_test.offset = val[9].to_i
				snort_rule_byte_test.number_type = val[11]
				snort_rule_byte_test.string_lit = val[13]
   result
  end
.,.,

module_eval <<'.,.,', 'SnortRuleParser.y', 433
  def _reduce_92( val, _values, result )
				snort_rule_byte_test = SnortRuleByte.new
				snort_rule_byte_test.order_no = @order_no
				@snort_rule.max_order_no = @order_no
				@order_no = @order_no + 1
				@snort_rule.byte_test = snort_rule_byte_test
				snort_rule_byte_test.bytes_to_convert = val[2].to_i
				snort_rule_byte_test.operator = val[4]
				snort_rule_byte_test.value = val[8].to_i
				snort_rule_byte_test.offset = val[10].to_i
				snort_rule_byte_test.number_type = val[12]
				snort_rule_byte_test.string_lit = val[14]
   result
  end
.,.,

module_eval <<'.,.,', 'SnortRuleParser.y', 447
  def _reduce_93( val, _values, result )
				snort_rule_byte_test = SnortRuleByte.new
				snort_rule_byte_test.order_no = @order_no
				@snort_rule.max_order_no = @order_no
				@order_no = @order_no + 1
				@snort_rule.byte_test = snort_rule_byte_test
				snort_rule_byte_test.bytes_to_convert = val[2].to_i
				snort_rule_byte_test.operator_not_modifier = true
				snort_rule_byte_test.operator = val[5]
				snort_rule_byte_test.value = val[7].to_i
				snort_rule_byte_test.offset = val[9].to_i
				snort_rule_byte_test.endian = val[11]
   result
  end
.,.,

module_eval <<'.,.,', 'SnortRuleParser.y', 460
  def _reduce_94( val, _values, result )
				snort_rule_byte_test = SnortRuleByte.new
				snort_rule_byte_test.order_no = @order_no
				@snort_rule.max_order_no = @order_no
				@order_no = @order_no + 1
				@snort_rule.byte_test = snort_rule_byte_test
				snort_rule_byte_test.bytes_to_convert = val[2].to_i
				snort_rule_byte_test.operator = val[4]
				snort_rule_byte_test.value = val[6].to_i
				snort_rule_byte_test.offset = val[8].to_i
				snort_rule_byte_test.endian = val[10]
   result
  end
.,.,

module_eval <<'.,.,', 'SnortRuleParser.y', 473
  def _reduce_95( val, _values, result )
				snort_rule_byte_test = SnortRuleByte.new
				snort_rule_byte_test.order_no = @order_no
				@snort_rule.max_order_no = @order_no
				@order_no = @order_no + 1
				@snort_rule.byte_test = snort_rule_byte_test
				snort_rule_byte_test.bytes_to_convert = val[2].to_i
				snort_rule_byte_test.operator_not_modifier = true
				snort_rule_byte_test.operator = val[5]
				snort_rule_byte_test.value = val[7].to_i
				snort_rule_byte_test.offset = val[9].to_i
   result
  end
.,.,

module_eval <<'.,.,', 'SnortRuleParser.y', 485
  def _reduce_96( val, _values, result )
				snort_rule_byte_test = SnortRuleByte.new
				snort_rule_byte_test.order_no = @order_no
				@snort_rule.max_order_no = @order_no
				@order_no = @order_no + 1
				@snort_rule.byte_test = snort_rule_byte_test
				snort_rule_byte_test.bytes_to_convert = val[2].to_i
				snort_rule_byte_test.operator = val[4]
				snort_rule_byte_test.value = val[6].to_i
				snort_rule_byte_test.offset = val[8].to_i
   result
  end
.,.,

module_eval <<'.,.,', 'SnortRuleParser.y', 488
  def _reduce_97( val, _values, result )
			@snort_rule.flow = val[2]
   result
  end
.,.,

module_eval <<'.,.,', 'SnortRuleParser.y', 494
  def _reduce_98( val, _values, result )
			flow_bit = SnortRuleFlowBit.new
			flow_bit.key_word = val[2]
			flow_bit.value = val[4]
			@snort_rule.flow_bits.push(flow_bit)
   result
  end
.,.,

module_eval <<'.,.,', 'SnortRuleParser.y', 498
  def _reduce_99( val, _values, result )
			flow_bit = SnortRuleFlowBit.new
			flow_bit.key_word = val[2]
			@snort_rule.flow_bits.push(flow_bit)
   result
  end
.,.,

 def _reduce_none( val, _values, result )
  result
 end

end   # class SnortRuleParser

#!/usr/bin/env ruby

# Class SnortRuleParserTest is a simple unit test of SnortRuleParser parse_rules method
# Author: Christian Seifert
# http://www.mcs.vuw.ac.nz/~cseifert/blog/index.php

require 'test/unit/testcase'
require 'analysisEngine/SnortRule'
require 'analysisEngine/SnortRulePcre'
require 'analysisEngine/SnortRuleByte'
require 'analysisEngine/SnortRuleUriContent'
require 'analysisEngine/SnortRuleHeaderContent'
require 'analysisEngine/SnortRuleContent'

class SnortRuleParserTest < Test::Unit::TestCase

	#test constructor and getters
	def test_initialize_tc16
		parser = SnortRuleParser.new 
		rules = parser.parse_rules("analysisEngine/unittest.rules")
		assert_equal(2,rules.length,"length not as expected")
		
		expected_references = Array["url,http://someref1.com","url,http://someotherref2.com"]
		expected_content1 = SnortRuleContent.new
		expected_content1.not_modifier = true
		expected_content1.nocase = true
		expected_content1.unescaped_string = "a \"string"
		expected_content1.depth = 3
		expected_content1.within = 4
		expected_content1.order_no = 0
		expected_content2 = SnortRuleContent.new
		expected_content2.unescaped_string = "another string"
		expected_content2.order_no = 4
		expected_contents = Array[expected_content1,expected_content2]
		expected_header_content1 = SnortRuleHeaderContent.new
		expected_header_content1.unescaped_string = "text/html"
		expected_header_content1.order_no = 1
		expected_header_contents = Array[expected_header_content1]
		expected_uri_content1 = SnortRuleUriContent.new
		expected_uri_content1.unescaped_string = "uri content string"
		expected_uri_content1.raw_bytes = true
		expected_uri_content1.distance = 10
		expected_uri_content1.offset = 3
		expected_uri_content1.order_no = 2
		expected_uri_content2 = SnortRuleUriContent.new
		expected_uri_content2.unescaped_string ="another uri content string"
		expected_uri_content2.isdataat = "50,relative"
		expected_uri_content2.nocase = true
		expected_uri_content2.order_no = 3
		expected_uri_contents = Array[expected_uri_content1,expected_uri_content2]
		expected_pcre1 = SnortRulePcre.new
		expected_pcre1.not_modifier = true
		expected_pcre1.modifiers = "i"
		expected_pcre1.regex = "/rule1pcre/"
		expected_pcre1.order_no = 5
		expected_pcre2 = SnortRulePcre.new
		expected_pcre2.not_modifier = false
		expected_pcre2.modifiers = "i"
		expected_pcre2.regex = "/rule1pcre2/"
		expected_pcre2.order_no = 7
		expected_pcres = Array[expected_pcre1,expected_pcre2]
		expected_byte_test = SnortRuleByte.new
		expected_byte_test.bytes_to_convert = 4
		expected_byte_test.operator = ">"
		expected_byte_test.value = 1000
		expected_byte_test.offset = 20
		expected_byte_test.relative = "relative"
		expected_byte_test.order_no = 6
		rule1 = rules[0]
		expected_flow_bits = Array.new
		flow_bit1 = SnortRuleFlowBit.new
		flow_bit1.key_word = "noalert"
		expected_flow_bits.push(flow_bit1)
		flow_bit2 = SnortRuleFlowBit.new
		flow_bit2.key_word = "set"
		flow_bit2.value = "test"
		expected_flow_bits.push(flow_bit2)
		
		assert_equal(7,rule1.max_order_no,"rule1: max order no not as expected.")
		assert_equal("alert",rule1.action,"rule1: alert not as expected.")
		assert_equal("tcp",rule1.protocol,"rule1: protocol not as expected.")
		assert_equal("!$HOME_NET",rule1.src_ip,"rule1: src_ip not as expected.")
		assert_equal(true,rule1.src_ports_not,"rule1: src_ports_not not as expected.")
		assert_equal(80..443,rule1.src_ports,"rule1: src_ports not as expected.")
		assert_equal("->",rule1.direction,"rule1: direction not as expected.")
		assert_equal("$EXTERNAL_NET",rule1.dst_ip,"rule1: dst_ip not as expected.")
		assert_equal(false,rule1.dst_ports_not,"rule1: dst_ports_not not as expected.")
		assert_equal("$HTTP_PORTS",rule1.dst_ports,"rule1: dst_ports not as expected.")
		
		assert_equal("rule1 msg",rule1.msg,"rule1: msg not as expected.")
		assert_equal(expected_references,rule1.references,"rule1: references not as expected.")
		assert_equal(1000001,rule1.sid,"rule1: sid not as expected.")
		assert_equal(4,rule1.rev,"rule1: rev not as expected.")
		assert_equal("trojan-activity",rule1.class_type,"rule1: classtype not as expected.")
		assert_equal(10,rule1.priority,"rule1: priority not as expected.")
		assert_equal(expected_contents,rule1.contents,"rule1: contents not as expected.")
		assert_equal(expected_header_contents,rule1.header_contents,"rule1: headercontents  not as expected.")
		assert_equal(expected_uri_contents,rule1.uri_contents,"rule1: uricontents  not as expected.")
		assert_equal("to_server,established",rule1.flow,"rule1: flow not as expected.")
		assert_equal(expected_pcres,rule1.pcres,"rule1: pcres not as expected.")
		assert_equal(expected_byte_test,rule1.byte_test,"rule1: byte_test not as expected.")
		assert_equal(expected_flow_bits,rule1.flow_bits,"rule1: flow bits not as expected.")

	end
	
	#commented out since we dont deliver these rules with honeyC. still a good test case though.
	#def test_initialize
	#	parser = SnortRuleParser.new
	#	rules = parser.parse_rules("analysisEngine/bleeding-malware.rules")
	#	puts "loaded " + rules.length.to_s + " rules."
	#end
end

#comment the next two lines out to enable running this unit test by executing
# ruby analysisEngine/SnortRuleParser.rb
#require 'test/unit/UI/Console/TestRunner'
#Test::Unit::UI::Console::TestRunner.run(SnortRuleParserTest)

